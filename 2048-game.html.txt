<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2048 遊戲 - 支援觸控</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #faf8ef;
        }
        #game-board {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            background-color: #bbada0;
            border-radius: 5px;
            padding: 10px;
            touch-action: none;
        }
        .tile {
            width: 70px;
            height: 70px;
            background-color: #cdc1b4;
            border-radius: 3px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            font-weight: bold;
            color: #776e65;
        }
        .tile-2 { background-color: #eee4da; }
        .tile-4 { background-color: #ede0c8; }
        .tile-8 { background-color: #f2b179; color: #f9f6f2; }
        .tile-16 { background-color: #f59563; color: #f9f6f2; }
        .tile-32 { background-color: #f67c5f; color: #f9f6f2; }
        .tile-64 { background-color: #f65e3b; color: #f9f6f2; }
        .tile-128 { background-color: #edcf72; color: #f9f6f2; }
        .tile-256 { background-color: #edcc61; color: #f9f6f2; }
        .tile-512 { background-color: #edc850; color: #f9f6f2; }
        .tile-1024 { background-color: #edc53f; color: #f9f6f2; }
        .tile-2048 { background-color: #edc22e; color: #f9f6f2; }
    </style>
</head>
<body>
    <div id="game-board"></div>

    <script>
        const board = [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ];

        function initGame() {
            addNewTile();
            addNewTile();
            renderBoard();
        }

        function addNewTile() {
            const emptyTiles = [];
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    if (board[i][j] === 0) {
                        emptyTiles.push({row: i, col: j});
                    }
                }
            }
            if (emptyTiles.length > 0) {
                const {row, col} = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];
                board[row][col] = Math.random() < 0.9 ? 2 : 4;
            }
        }

        function renderBoard() {
            const gameBoard = document.getElementById('game-board');
            gameBoard.innerHTML = '';
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    const tile = document.createElement('div');
                    tile.className = `tile tile-${board[i][j]}`;
                    tile.textContent = board[i][j] || '';
                    gameBoard.appendChild(tile);
                }
            }
        }

        function move(direction) {
            let moved = false;
            const newBoard = JSON.parse(JSON.stringify(board));

            if (direction === 'left' || direction === 'right') {
                for (let i = 0; i < 4; i++) {
                    const row = newBoard[i];
                    const merged = new Array(4).fill(false);
                    if (direction === 'left') {
                        for (let j = 1; j < 4; j++) {
                            if (row[j] !== 0) {
                                let k = j;
                                while (k > 0 && (row[k-1] === 0 || (row[k-1] === row[k] && !merged[k-1]))) {
                                    if (row[k-1] === 0) {
                                        row[k-1] = row[k];
                                        row[k] = 0;
                                        k--;
                                        moved = true;
                                    } else if (row[k-1] === row[k]) {
                                        row[k-1] *= 2;
                                        row[k] = 0;
                                        merged[k-1] = true;
                                        moved = true;
                                        break;
                                    }
                                }
                            }
                        }
                    } else {
                        for (let j = 2; j >= 0; j--) {
                            if (row[j] !== 0) {
                                let k = j;
                                while (k < 3 && (row[k+1] === 0 || (row[k+1] === row[k] && !merged[k+1]))) {
                                    if (row[k+1] === 0) {
                                        row[k+1] = row[k];
                                        row[k] = 0;
                                        k++;
                                        moved = true;
                                    } else if (row[k+1] === row[k]) {
                                        row[k+1] *= 2;
                                        row[k] = 0;
                                        merged[k+1] = true;
                                        moved = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                for (let j = 0; j < 4; j++) {
                    const column = [newBoard[0][j], newBoard[1][j], newBoard[2][j], newBoard[3][j]];
                    const merged = new Array(4).fill(false);
                    if (direction === 'up') {
                        for (let i = 1; i < 4; i++) {
                            if (column[i] !== 0) {
                                let k = i;
                                while (k > 0 && (column[k-1] === 0 || (column[k-1] === column[k] && !merged[k-1]))) {
                                    if (column[k-1] === 0) {
                                        column[k-1] = column[k];
                                        column[k] = 0;
                                        k--;
                                        moved = true;
                                    } else if (column[k-1] === column[k]) {
                                        column[k-1] *= 2;
                                        column[k] = 0;
                                        merged[k-1] = true;
                                        moved = true;
                                        break;
                                    }
                                }
                            }
                        }
                    } else {
                        for (let i = 2; i >= 0; i--) {
                            if (column[i] !== 0) {
                                let k = i;
                                while (k < 3 && (column[k+1] === 0 || (column[k+1] === column[k] && !merged[k+1]))) {
                                    if (column[k+1] === 0) {
                                        column[k+1] = column[k];
                                        column[k] = 0;
                                        k++;
                                        moved = true;
                                    } else if (column[k+1] === column[k]) {
                                        column[k+1] *= 2;
                                        column[k] = 0;
                                        merged[k+1] = true;
                                        moved = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    for (let i = 0; i < 4; i++) {
                        newBoard[i][j] = column[i];
                    }
                }
            }

            if (moved) {
                board.splice(0, board.length, ...newBoard);
                addNewTile();
                renderBoard();
            }
        }

        // 添加觸摸事件支援
        let startX, startY;
        const gameBoard = document.getElementById('game-board');

        gameBoard.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
        });

        gameBoard.addEventListener('touchend', (e) => {
            const endX = e.changedTouches[0].clientX;
            const endY = e.changedTouches[0].clientY;
            const diffX = endX - startX;
            const diffY = endY - startY;

            if (Math.abs(diffX) > Math.abs(diffY)) {
                if (diffX > 0) {
                    move('right');
                } else {
                    move('left');
                }
            } else {
                if (diffY > 0) {
                    move('down');
                } else {
                    move('up');
                }
            }
        });

        // 保留鍵盤支援
        document.addEventListener('keydown', (event) => {
            switch(event.key) {
                case 'ArrowLeft':
                    move('left');
                    break;
                case 'ArrowRight':
                    move('right');
                    break;
                case 'ArrowUp':
                    move('up');
                    break;
                case 'ArrowDown':
                    move('down');
                    break;
            }
        });

        initGame();
    </script>
</body>
</html>
